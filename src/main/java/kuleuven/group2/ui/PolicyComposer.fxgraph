package kuleuven.group2.ui

import javafx.scene.layout.GridPane
import javafx.scene.layout.ColumnConstraints
import javafx.scene.control.TableView
import javafx.scene.control.ListView
import javafx.scene.control.Label
import javafx.scene.control.TextArea
import javafx.geometry.Insets
import kuleuven.group2.ui.model.PolicyModel
import kuleuven.group2.ui.model.CompositePolicyModel
import kuleuven.group2.ui.model.WeightedPolicyModel
import kuleuven.group2.ui.PolicyComposerController
import javafx.scene.layout.RowConstraints
import javafx.scene.layout.HBox
import javafx.scene.control.Button
import javafx.scene.control.ComboBox
import javafx.scene.control.TextField

component PolicyComposer controlledby PolicyComposerController {
	GridPane {
		hgap : 5,
		vgap : 5,
		columnConstraints : [
			ColumnConstraints {
				hgrow : "SOMETIMES"
			},
			ColumnConstraints {
				hgrow : "ALWAYS"
			}
		],
		rowConstraints : [
			RowConstraints {
				vgrow : "ALWAYS"
			},
			RowConstraints {
				vgrow : "NEVER"
			}
		],
		children : [
			TableView < CompositePolicyModel > id policiesTable {
				static columnIndex : 0, static rowIndex : 0,
				columnResizePolicy : const TableView#CONSTRAINED_RESIZE_POLICY,
				editable : true,
				placeholder : Label {
					text : "No composed policies"
				}
			},
			HBox {
				static columnIndex : 0, static rowIndex : 1,
				spacing : 5,
				children : [
					TextField id newComposedName {
						text : "New policy"
					},
					Button id addComposed {
						text : "Add",
						onAction : controllermethod addComposedPolicy
					},
					Button id removeComposed {
						text : "Remove",
						onAction : controllermethod removeComposedPolicies
					}
				]
			},
			TableView < WeightedPolicyModel > id weightedPoliciesTable {
				static columnIndex : 1, static rowIndex : 0, static hgrow : "ALWAYS",
				editable : true,
				placeholder : Label {
					text : "No weighted policies in the selected composed policy"
				}
			},
			HBox {
				static columnIndex : 1, static rowIndex : 1,
				spacing : 5,
				children : [
					ComboBox < PolicyModel > id newWeightedPolicy,
					Button id addWeightedPolicy {
						text : "Add",
						onAction : controllermethod addWeightedPolicy
					},
					Button id removeWeightedPolicy {
						text : "Remove",
						onAction : controllermethod removeWeightedPolicies
					}
				]
			}
		]
	}
}
